options {
    LOOKAHEAD = 2;
    DEBUG_PARSER = true;
}

PARSER_BEGIN(MiniJavaParser)

package ParserGenerator;

import java.util.List;
import java.util.ArrayList;

public class MiniJavaParser {
    public static List<ParseException> errors;
    public static void init_errors() {
        errors = new ArrayList<ParseException>();
    }
}

PARSER_END(MiniJavaParser)

SKIP : {
      < #NEW_LINE: "\n" | "\r" >
    | < "/*" ((~["*"])* ("*" ~["/"])?)* ("*")? "*/" >
    | < "//" (~[ "\n", "\r" ])* <NEW_LINE> >
    | < <NEW_LINE> >
    | < " " | "\t" | "\f" >
}

TOKEN : {
      < CLASS: "class" >
    | < PUBLIC: "public" >
    | < STATIC: "static" >
    | < VOID: "void" >
    | < MAIN: "main" >
    | < STRING: "String" >
    | < EXTENDS: "extends" >
    | < RETURN: "return" >
    | < INT: "int" >
    | < BOOLEAN: "boolean" >
    | < IF: "if" >
    | < ELSE: "else" >
    | < WHILE: "while" >
    | < SYSTEM_OUT_PRINTLN: "System.out.println" >
    | < LENGTH: "length" >
    | < NEW: "new" >
    | < TRUE: "true" >
    | < FALSE: "false" >
    | < THIS: "this" >
    | < ABSTRACT: "abstract" >
    | < CONTINUE: "continue" >
    | < FOR: "for" >
    | < SWITCH: "switch" >
    | < ASSERT: "assert" >
    | < DEF: "default" >
    | < PACKAGE: "package" >
    | < SYNCHRONIZED: "synchronized" >
    | < DO: "do" >
    | < GOTO: "goto" >
    | < PRIVATE: "private" >
    | < BREAK: "break" >
    | < DOUBLE: "double" >
    | < IMPLEMENTS: "implements" >
    | < PROTECTED: "protected" >
    | < THROW: "throw" >
    | < BYTE: "byte" >
    | < IMPORT: "import" >
    | < THROWS: "throws" >
    | < CASE: "case" >
    | < ENUM: "enum" >
    | < INSTANCEOF: "instanceof" >
    | < TRANSIENT: "transient" >
    | < CATCH: "catch" >
    | < SHORT: "short" >
    | < TRY: "try" >
    | < CHAR: "char" >
    | < FINAL: "final" >
    | < INTERFACE: "interface" >
    | < FINALLY: "finally" >
    | < LONG: "long" >
    | < STRICTFP: "strictfp" >
    | < VOLATILE: "volatile" >
    | < CONST: "const" >
    | < FLOAT: "float" >
    | < NATIVE: "native" >
    | < SUPER: "super" >
    | < NULL: "null" >
    | < CURLY_OPEN: "{" >
    | < CURLY_CLOSE: "}" >
    | < PAREN_OPEN: "(" >
    | < PAREN_CLOSE: ")" >
    | < SQUARE_OPEN: "[" >
    | < SQUARE_CLOSE: "]" >
    | < SEMI_COLON: ";" >
    | < COMMA: "," >
    | < EQUAL: "=" >
    | < AND: "&&" >
    | < LESS: "<" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < STAR: "*" >
    | < DOT: "." >
    | < BANG: "!" >
    | < #LETTER: ["a" - "z"] | ["A" - "Z"] >
    | < #DIGIT: ["0" - "9"] >
    | < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT> | "_")* >
    | < INTEGER_LITERAL: "0" | (["1" - "9"]) (<DIGIT>)* >
    | < MONKEY: ~[] >
}

Program Program() :
{MainClass mainClass; ClassDecl classDecl; List<ClassDecl> classDecls;}
{
    try {
        { classDecls = new ArrayList<ClassDecl>(); }
        mainClass=MainClass() ( classDecl=ClassDecl() { classDecls.add(classDecl); } )* <EOF>
    } catch (ParseException exc) {
        errors.add(exc);
    }
    { return new Program(mainClass, classDecls); }
}

MainClass MainClass() :
{Identifier name; Identifier args; Statement s;}
{
    <CLASS> name=Identifier() <CURLY_OPEN> <PUBLIC> <STATIC> <VOID> <MAIN> <PAREN_OPEN> <STRING> <SQUARE_OPEN> <SQUARE_CLOSE> args=Identifier() <PAREN_CLOSE> <CURLY_OPEN> s=Statement() <CURLY_CLOSE> <CURLY_CLOSE>
    { return new MainClass(name, args, s); }
}

ClassDecl ClassDecl() :
{Identifier name; Identifier extended; boolean isExtended; FieldDecl fieldDecl; List<FieldDecl> fieldDecls; MethodDecl methodDecl; List<MethodDecl> methodDecls;}
{
      { isExtended = false; } <CLASS> name=Identifier() ( <EXTENDS> extended=Identifier() { isExtended = true; } )? <CURLY_OPEN>
        ( fieldDecl=VarDecl() { fieldDecls.add(fieldDecl); } )* ( methodDecl=MethodDecl() { methodDecls.add(methodDecl); } )*
      <CURLY_CLOSE>
      { if (isExtended) return new ExtendingClassDecl(name, extended, fieldDecls, methodDecls); else return new SimpleClassDecl(name, fieldDecls, methodDecls); }
    | <IDENTIFIER> <IDENTIFIER> <PAREN_OPEN> ( Type() <IDENTIFIER> ( <COMMA> Type() <IDENTIFIER> )* )? <PAREN_CLOSE> <CURLY_OPEN> <CURLY_CLOSE> // TODO record case
}

VarDecl VarDecl() :
{Type type; Identifier name;}
{
    type=Type() name=Identifier() <SEMI_COLON>
    { return new VarDecl(type, name); }
}

MethodDecl MethodDecl() :
{Type type; Identifier name; Formal formal; List<Formal> formals; VarDecl varDecl; List<VarDecl> varDecls; Statement statement; List<Statement> statements; Expression returnVal;}
{
    { formals = new ArrayList<Formal>(); varDecls = new ArrayList<VarDecl>(); statements = new ArrayList<Statement>(); }
    <PUBLIC> type=Type() name=Identifier() <PAREN_OPEN> ( formal=Formal() { formals.add(formal); } ( <COMMA> formal=Formal() { formals.add(formal); } )* )? <PAREN_CLOSE> <CURLY_OPEN> ( varDecl=VarDecl() { varDecls.add(varDecl); } )* ( statement=Statement() { statements.add(statement); } )* <RETURN> returnVal=Expression() <SEMI_COLON> <CURLY_CLOSE>
    { return new MethodDecl(type, name, formals, varDecls, statements, returnVal); }
}

Formal Formal() :
{Type type; Identifier name;}
{
    type=Type() name=Identifier()
    { return new Formal(type, name); }
}

Type Type() :
{Identifier name;}
{
      <INT> <SQUARE_OPEN> <SQUARE_CLOSE> { return new IntArrayType(); }
    | <BOOLEAN> { return new BooleanType(); }
    | <INT> { return new IntegerType(); }
    | name=Identifier() { return new IdentifierType(name); }
}

Statement Statement() :
{Statement s;}
{
    try {
          s=BlockStatement() { return s; }
        | s=IfStatement() { return s; }
        | s=WhileStatement() { return s; }
        | s=PrintStatement() { return s; }
        | s=AssignStatement() { return s; }
        | s=ArrAssignStatement() { return s; }
    } catch (ParseException exc) {
        errors.add(exc);
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != SEMI_COLON);
    }
}

Statement BlockStatement() :
{Statement statement; List<Statements> statements;}
{
    { statements = new ArrayList<Statement>(); }
    <CURLY_OPEN> ( statement=Statement() { statements.add(statement); } )* <CURLY_CLOSE>
    { return new Block(statements); }
}

Statement IfStatement() :
{Expression condition; Statement ifTrue; Statement ifFalse;}
{
    <IF> <PAREN_OPEN> condition=Expression() <PAREN_CLOSE> ifTrue=Statement() <ELSE> ifFalse=Statement()
    { return new If(condition, ifTrue, ifFalse); }
}

Statement WhileStatement() :
{Expression condition; Statement statement;}
{
    <WHILE> <PAREN_OPEN> condition=Expression() <PAREN_CLOSE> statement=Statement()
    { return new While(condition, statement); }
}

Statement PrintStatement() :
{Expression toPrint;}
{
    <SYSTEM_OUT_PRINTLN> <PAREN_OPEN> toPrint=Expression() <PAREN_CLOSE> <SEMI_COLON>
    { return new Print(toPrint); }
}

Statement AssignStatement() :
{Identifier name; Expression value;}
{
    name=Identifier() <EQUAL> value=Expression() <SEMI_COLON>
    { return new Assign(name, value); }
}

Statement ArrAssignStatement() :
{Identifier name; Expression index; Expression value;}
{
    name=Identifier() <SQUARE_OPEN> index=Expression() <SQUARE_CLOSE> <EQUAL> valeu=Expression() <SEMI_COLON>
    { return new ArrayAssign(name, index, value); }
}

Expression Expression() :
{Expression e;}
{
    e=ExpressionPrec4()
    { return e; }
}

Expression ExpressionPrec4() :
{Expression e1, e2; boolean didAnd;}
{
    { didAnd = false; }
    e1=ExpressionPrec9() ( <AND> e2=ExpressionPrec4() { didAnd = true; } )?
    { if (didAnd) return new And(e1, e2); else return e1; }
}

Expression ExpressionPrec9() :
{Expression e1, e2; boolean didLess;}
{
    { didLess = false; }
    e1=ExpressionPrec11() ( <LESS> e2=ExpressionPrec9() { didLess = true; } )?
    { if (didLess) return new LessThan(e1, e2); else e1; }
}

Expression ExpressionPrec11() :
{Expression e1, e2; boolean didAdd; boolean didMinus;}
{
    { didAdd = false; didMinus = false; }
    e1=ExpressionPrec12() (
          <PLUS> e2=ExpressionPrec11() { didAdd = true; }
        | <MINUS> e2=ExpressionPrec11() { didMinus = true; }
    )?
    { if (didAdd) return new Plus(e1, e2); else if (didMinus) return new Minus(e1, e2); return e1; }
}

Expression ExpressionPrec12() :
{Expression e1, e2; boolean didTimes;}
{
    { didTimes = false; }
    e1=ExpressionPrec14() ( <STAR> e2=ExpressionPrec12() { didTimes = true; } )?
    { if (didTimes) return new Times(e1, e2); else return e1; }
}

Expression ExpressionPrec14() :
{Expression e;}
{
      <BANG> e=Expression() { return new Not(e); }
    | e=ExpressionPrec15() { return e; }
}

Expression ExpressionPrec15() :
{Identifier field; Expression e1, e2; List<Expression> el;}
{
    { el = new ArrayList<Expression>(); }
    e1=ExpressionPrec16() (
          <SQUARE_OPEN> e2=Expression() <SQUARE_CLOSE> { return ArrayLookup(e1, e2); }
        | <DOT> (
              field=Identifier() <PAREN_OPEN> ( e2=Expression() { el.add(e2); } ( <COMMA> e2=Expression() { el.add(e2); } )* )? <PAREN_CLOSE> { return new Call(e1, field, el); }
            | <LENGTH> { return new ArrayLength(e1); }
        )
    )?
}

Expression ExpressionPrec16() :
{Expression e;}
{
      <PAREN_OPEN> e=Expression() <PAREN_CLOSE> { return e; }
    | e=ExpressionBaseCase() { return e; }
}

Expression ExpressionBaseCase() :
{Expression e; String id; Identifier identifier;}
{
      e=IntegerLiteral() { return e; }
    | <TRUE> { return new True(); }
    | <FALSE> { return new False(); }
    | id=<IDENTIFIER> { return new IdentifierExp(id); }
    | <THIS> { return new This(); }
    | <NEW> (
          <INT> <SQUARE_OPEN> e=Expression() <SQUARE_CLOSE { return new NewArray(e); }
        | identifier=Identifier() <PAREN_OPEN> <PAREN_CLOSE> { return new NewObject(identifier); }
    )
}

Expression IntegerLiteral() :
{String val;}
{
    val=<INTEGER_LITERAL> { return new IntegerLiteral(Integer.valueOf(val)); }
}

Identifier Identifier() :
{String id;}
{
    id=<IDENTIFIER> { return new Identifier(id); }
}