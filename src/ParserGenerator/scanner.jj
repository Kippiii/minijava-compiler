options {
    LOOKAHEAD = 2;
    DEBUG_PARSER = true;
    STATIC = false;
}

PARSER_BEGIN(MiniJavaParser)

package ParserGenerator;

import java.util.List;
import java.util.ArrayList;
import syntax.*;

public class MiniJavaParser {
    public static List<ParseException> errors;
    public static void init_errors() {
        errors = new ArrayList<ParseException>();
    }
    public static ClassDecl makeRecord(Identifier name, List<Type> types, List<Identifier> fieldNames) {
        // Create fields
        List<FieldDecl> fields = new ArrayList<FieldDecl>();
        for (int i = 0; i < types.size(); i++) {
            String fieldName = "$" + fieldNames.get(i).s;
            fields.add(new FieldDecl(types.get(i), new Identifier(fieldNames.get(i).lineNumber, fieldNames.get(i).columnNumber, fieldName)));
        }

        // Create getter methods
        List<MethodDecl> methods = new ArrayList<MethodDecl>();
        for (int i = 0; i < types.size(); i++) {
            Type retType = types.get(i);
            Identifier curName = fieldNames.get(i);
            List<FormalDecl> formals = new ArrayList<FormalDecl>();
            List<LocalDecl> locals = new ArrayList<LocalDecl>();
            List<Statement> statements = new ArrayList<Statement>();
            Expression ret = new IdentifierExp(curName.lineNumber, name.columnNumber, "$" + curName.s);
            methods.add(new MethodDecl(retType, curName, formals, locals, statements, ret));
        }

        // Create init method
        Type initRetType = new IdentifierType(0, 0, name.s);
        Identifier initName = new Identifier(name.lineNumber, name.columnNumber, "$$init");
        List<FormalDecl> initFormals = new ArrayList<FormalDecl>();
        for (int i = 0; i < types.size(); i++) {
            initFormals.add(new FormalDecl(types.get(i), fieldNames.get(i)));
        }
        List<LocalDecl> initLocals = new ArrayList<LocalDecl>();
        List<Statement> setters = new ArrayList<Statement>();
        for (int i = 0; i < types.size(); i++) {
            Identifier fieldName = fieldNames.get(i);
            Identifier id = new Identifier(fieldName.lineNumber, fieldName.columnNumber, "$" + fieldName.s);
            IdentifierExp assigned = new IdentifierExp(fieldName.lineNumber, fieldName.columnNumber, fieldName.s);
            setters.add(new Assign(id, assigned));
        }
        Expression initRet = new This();
        methods.add(new MethodDecl(initRetType, initName, initFormals, initLocals, setters, initRet));

        // Create and return class
        return new SimpleClassDecl(name, fields, methods);
    }
}

PARSER_END(MiniJavaParser)

SKIP : {
      < #NEW_LINE: "\n" | "\r" >
    | < "/*" ((~["*"])* ("*" ~["/"])?)* ("*")? "*/" >
    | < "//" (~[ "\n", "\r" ])* <NEW_LINE> >
    | < <NEW_LINE> >
    | < " " | "\t" | "\f" >
}

TOKEN : {
      < CLASS: "class" >
    | < PUBLIC: "public" >
    | < STATIC: "static" >
    | < VOID: "void" >
    | < MAIN: "main" >
    | < STRING: "String" >
    | < EXTENDS: "extends" >
    | < RETURN: "return" >
    | < INT: "int" >
    | < BOOLEAN: "boolean" >
    | < IF: "if" >
    | < ELSE: "else" >
    | < WHILE: "while" >
    | < SYSTEM_OUT_PRINTLN: "System.out.println" >
    | < LENGTH: "length" >
    | < NEW: "new" >
    | < TRUE: "true" >
    | < FALSE: "false" >
    | < THIS: "this" >
    | < ABSTRACT: "abstract" >
    | < CONTINUE: "continue" >
    | < FOR: "for" >
    | < SWITCH: "switch" >
    | < ASSERT: "assert" >
    | < DEF: "default" >
    | < PACKAGE: "package" >
    | < SYNCHRONIZED: "synchronized" >
    | < DO: "do" >
    | < GOTO: "goto" >
    | < PRIVATE: "private" >
    | < BREAK: "break" >
    | < DOUBLE: "double" >
    | < IMPLEMENTS: "implements" >
    | < PROTECTED: "protected" >
    | < THROW: "throw" >
    | < BYTE: "byte" >
    | < IMPORT: "import" >
    | < THROWS: "throws" >
    | < CASE: "case" >
    | < ENUM: "enum" >
    | < INSTANCEOF: "instanceof" >
    | < TRANSIENT: "transient" >
    | < CATCH: "catch" >
    | < SHORT: "short" >
    | < TRY: "try" >
    | < CHAR: "char" >
    | < FINAL: "final" >
    | < INTERFACE: "interface" >
    | < FINALLY: "finally" >
    | < LONG: "long" >
    | < STRICTFP: "strictfp" >
    | < VOLATILE: "volatile" >
    | < CONST: "const" >
    | < FLOAT: "float" >
    | < NATIVE: "native" >
    | < SUPER: "super" >
    | < NULL: "null" >
    | < CURLY_OPEN: "{" >
    | < CURLY_CLOSE: "}" >
    | < PAREN_OPEN: "(" >
    | < PAREN_CLOSE: ")" >
    | < SQUARE_OPEN: "[" >
    | < SQUARE_CLOSE: "]" >
    | < SEMI_COLON: ";" >
    | < COMMA: "," >
    | < EQUAL: "=" >
    | < AND: "&&" >
    | < LESS: "<" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < STAR: "*" >
    | < DOT: "." >
    | < BANG: "!" >
    | < #LETTER: ["a" - "z"] | ["A" - "Z"] >
    | < #DIGIT: ["0" - "9"] >
    | < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT> | "_")* >
    | < INTEGER_LITERAL: "0" | (["1" - "9"]) (<DIGIT>)* >
    | < MONKEY: ~[] >
}

Program Program() :
{MainClass mainClass; ClassDecl classDecl; List<ClassDecl> classDecls;}
{
    try {
        { classDecls = new ArrayList<ClassDecl>(); }
        mainClass=MainClass() ( classDecl=ClassDecl() { classDecls.add(classDecl); } )* <EOF>
        { return new Program(mainClass, classDecls); }
    } catch (ParseException exc) {
        errors.add(exc);
    }
    { return null; }
}

MainClass MainClass() :
{Token t; Identifier name; Identifier args; Statement s;}
{
    t=<CLASS> name=Identifier() <CURLY_OPEN> <PUBLIC> <STATIC> <VOID> <MAIN> <PAREN_OPEN> <STRING> <SQUARE_OPEN> <SQUARE_CLOSE> args=Identifier() <PAREN_CLOSE> <CURLY_OPEN> s=Statement() <CURLY_CLOSE> <CURLY_CLOSE>
    { return new MainClass(t.beginLine, t.beginColumn, name, args, s); }
}

ClassDecl ClassDecl() :
{Token t; Identifier name; Identifier extended; boolean isExtended; FieldDecl fieldDecl; List<FieldDecl> fieldDecls; MethodDecl methodDecl; List<MethodDecl> methodDecls; ClassDecl record;}
{
      { fieldDecls = new ArrayList<FieldDecl>(); methodDecls = new ArrayList<MethodDecl>(); extended = null; }
        { isExtended = false; } <CLASS> name=Identifier() ( <EXTENDS> extended=Identifier() { isExtended = true; } )? <CURLY_OPEN>
        ( fieldDecl=FieldDecl() { fieldDecls.add(fieldDecl); } )* ( methodDecl=MethodDecl() { methodDecls.add(methodDecl); } )*
      <CURLY_CLOSE>
      { if (isExtended) return new ExtendingClassDecl(name, extended, fieldDecls, methodDecls); else return new SimpleClassDecl(name, fieldDecls, methodDecls); }
    | record=Record() {return record;}
}

ClassDecl Record() :
{Identifier recordWord, name; Type type; List<Type> types; Identifier fieldName; List<Identifier> fieldNames;}
{
    { types = new ArrayList<Type>(); fieldNames = new ArrayList<Identifier>(); }
    recordWord=Identifier() name=Identifier() <PAREN_OPEN> ( type=Type() fieldName=Identifier() { types.add(type); fieldNames.add(fieldName); }  ( <COMMA> type=Type() fieldName=Identifier() { types.add(type); fieldNames.add(fieldName); } )* )? <PAREN_CLOSE> <CURLY_OPEN> <CURLY_CLOSE>
    { return makeRecord(name, types, fieldNames); } // TODO What if recordWord is wrong...
}

FieldDecl FieldDecl() :
{Type type; Identifier name;}
{
    type=Type() name=Identifier() <SEMI_COLON>
    { return new FieldDecl(type, name); }
}

LocalDecl LocalDecl() :
{Type type; Identifier name;}
{
    type=Type() name=Identifier() <SEMI_COLON>
    { return new LocalDecl(type, name); }
}

MethodDecl MethodDecl() :
{Token t; Type type; Identifier name; FormalDecl formal; List<FormalDecl> formals; LocalDecl varDecl; List<LocalDecl> varDecls; Statement statement; List<Statement> statements; Expression returnVal;}
{
    { formals = new ArrayList<FormalDecl>(); varDecls = new ArrayList<LocalDecl>(); statements = new ArrayList<Statement>(); }
    t=<PUBLIC> type=Type() name=Identifier() <PAREN_OPEN> ( formal=Formal() { formals.add(formal); } ( <COMMA> formal=Formal() { formals.add(formal); } )* )? <PAREN_CLOSE> <CURLY_OPEN> ( varDecl=LocalDecl() { varDecls.add(varDecl); } )* ( statement=Statement() { statements.add(statement); } )* <RETURN> returnVal=Expression() <SEMI_COLON> <CURLY_CLOSE>
    { return new MethodDecl(type, name, formals, varDecls, statements, returnVal); }
}

FormalDecl Formal() :
{Type type; Identifier name;}
{
    type=Type() name=Identifier()
    { return new FormalDecl(type, name); }
}

Type Type() :
{Token t; Identifier name;}
{
      t=<INT> <SQUARE_OPEN> <SQUARE_CLOSE> { return Type.THE_INT_ARRAY_TYPE; }
    | t=<BOOLEAN> { return Type.THE_BOOLEAN_TYPE; }
    | t=<INT> { return Type.THE_INTEGER_TYPE; }
    | name=Identifier() { return new IdentifierType(name.lineNumber, name.columnNumber, name.s); }
}

Statement Statement() :
{Statement s;}
{
    try {
          s=BlockStatement() { return s; }
        | s=IfStatement() { return s; }
        | s=WhileStatement() { return s; }
        | s=PrintStatement() { return s; }
        | s=AssignStatement() { return s; }
        | s=ArrAssignStatement() { return s; }
    } catch (ParseException exc) {
        errors.add(exc);
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != SEMI_COLON && t.kind != EOF);
        return null;
    }
}

Statement BlockStatement() :
{Statement statement; List<Statement> statements;}
{
    { statements = new ArrayList<Statement>(); }
    <CURLY_OPEN> ( statement=Statement() { statements.add(statement); } )* <CURLY_CLOSE>
    { return new Block(statements); }
}

Statement IfStatement() :
{Token t; Expression condition; Statement ifTrue; Statement ifFalse;}
{
    t=<IF> <PAREN_OPEN> condition=Expression() <PAREN_CLOSE> ifTrue=Statement() <ELSE> ifFalse=Statement()
    { return new If(t.beginLine, t.beginColumn, condition, ifTrue, ifFalse); }
}

Statement WhileStatement() :
{Token t; Expression condition; Statement statement;}
{
    t=<WHILE> <PAREN_OPEN> condition=Expression() <PAREN_CLOSE> statement=Statement()
    { return new While(t.beginLine, t.beginColumn, condition, statement); }
}

Statement PrintStatement() :
{Token t; Expression toPrint;}
{
    t=<SYSTEM_OUT_PRINTLN> <PAREN_OPEN> toPrint=Expression() <PAREN_CLOSE> <SEMI_COLON>
    { return new Print(t.beginLine, t.beginColumn, toPrint); }
}

Statement AssignStatement() :
{Identifier name; Expression value;}
{
    name=Identifier() <EQUAL> value=Expression() <SEMI_COLON>
    { return new Assign(name.lineNumber, name.columnNumber, name, value); }
}

Statement ArrAssignStatement() :
{Identifier name; Expression index; Expression value;}
{
    name=Identifier() <SQUARE_OPEN> index=Expression() <SQUARE_CLOSE> <EQUAL> value=Expression() <SEMI_COLON>
    { return new ArrayAssign(name.lineNumber, name.columnNumber, name, index, value); }
}

Expression Expression() :
{Expression e;}
{
    e=ExpressionPrec4()
    { return e; }
}

Expression ExpressionPrec4() :
{Expression e1, e2; boolean didAnd;}
{
    { didAnd = false; e2 = null; }
    e1=ExpressionPrec9() ( <AND> e2=ExpressionPrec4() { didAnd = true; } )?
    { if (didAnd) return new And(e1.lineNumber, e1.columnNumber, e1, e2); else return e1; }
}

Expression ExpressionPrec9() :
{Expression e1, e2; boolean didLess;}
{
    { didLess = false; e2 = null; }
    e1=ExpressionPrec11() ( <LESS> e2=ExpressionPrec9() { didLess = true; } )?
    { if (didLess) return new LessThan(e1.lineNumber, e1.columnNumber, e1, e2); else return e1; }
}

Expression ExpressionPrec11() :
{Expression e1, e2; boolean didAdd; boolean didMinus;}
{
    { didAdd = false; didMinus = false; e2 = null; }
    e1=ExpressionPrec12() (
          <PLUS> e2=ExpressionPrec11() { didAdd = true; }
        | <MINUS> e2=ExpressionPrec11() { didMinus = true; }
    )?
    { if (didAdd) return new Plus(e1.lineNumber, e1.columnNumber, e1, e2); else if (didMinus) return new Minus(e1.lineNumber, e1.columnNumber, e1, e2); return e1; }
}

Expression ExpressionPrec12() :
{Expression e1, e2; boolean didTimes;}
{
    { didTimes = false; e2 = null; }
    e1=ExpressionPrec14() ( <STAR> e2=ExpressionPrec12() { didTimes = true; } )?
    { if (didTimes) return new Times(e1.lineNumber, e1.columnNumber, e1, e2); else return e1; }
}

Expression ExpressionPrec14() :
{Expression e;}
{
      <BANG> e=Expression() { return new Not(e.lineNumber, e.columnNumber, e); }
    | e=ExpressionPrec15() { return e; }
}

Expression ExpressionPrec15() :
{Token t; Identifier field; Expression e1, e2; List<Expression> el;}
{
    { el = new ArrayList<Expression>(); }
    e1=ExpressionPrec16() (
          <SQUARE_OPEN> e2=Expression() <SQUARE_CLOSE> { return new ArrayLookup(e1.lineNumber, e1.columnNumber, e1, e2); }
        | <DOT> (
              field=Identifier() <PAREN_OPEN> ( e2=Expression() { el.add(e2); } ( <COMMA> e2=Expression() { el.add(e2); } )* )? <PAREN_CLOSE> { return new Call(e1.lineNumber, e1.columnNumber, e1, field, el); }
            | <LENGTH> { return new ArrayLength(e1.lineNumber, e1.columnNumber, e1); }
        )
    )?
    { return e1; }
}

Expression ExpressionPrec16() :
{Expression e;}
{
      <PAREN_OPEN> e=Expression() <PAREN_CLOSE> { return e; }
    | e=ExpressionBaseCase() { return e; }
}

Expression ExpressionBaseCase() :
{Token t; Expression e; Token id; Identifier identifier;}
{
      e=IntegerLiteral() { return e; }
    | t=<TRUE> { return new True(t.beginLine, t.beginColumn); }
    | t=<FALSE> { return new False(t.beginLine, t.beginColumn); }
    | id=<IDENTIFIER> { return new IdentifierExp(id.beginLine, id.beginColumn, id.image); }
    | t=<THIS> { return new This(t.beginLine, t.beginColumn); }
    | t=<NEW> <INT> <SQUARE_OPEN> e=Expression() <SQUARE_CLOSE> { return new NewArray(t.beginLine, t.beginColumn, e); }
    | t=<NEW> identifier=Identifier() <PAREN_OPEN> e=InsideNew(identifier) <PAREN_CLOSE> { if (e == null) return new NewObject(t.beginLine, t.beginColumn, identifier); else return e; }
}

Expression IntegerLiteral() :
{Token val;}
{
    val=<INTEGER_LITERAL> { return new IntegerLiteral(val.beginLine, val.beginColumn, Integer.valueOf(val.image)); }
}

Identifier Identifier() :
{Token id;}
{
    id=<IDENTIFIER> { return new Identifier(id.beginLine, id.beginColumn, id.image); }
}

Expression InsideNew(Identifier cls) :
{Expression exp; List<Expression> fields;}
{
    (
        { fields = new ArrayList<Expression>(); }
        exp=Expression() { fields.add(exp); } ( <COMMA> exp=Expression() { fields.add(exp); } )*
        {
            return new Call(cls.lineNumber, cls.columnNumber, new NewObject(cls.lineNumber, cls.columnNumber, cls), new Identifier(0, 0, "$$init"), fields);
        }
    )?
    { return null; }
}