options {
    LOOKAHEAD = 2;
    DEBUG_PARSER = true;
}

PARSER_BEGIN(MiniJavaParser)

package ParserGenerator;

import java.util.List;
import java.util.ArrayList;

public class MiniJavaParser {
    public static List<ParseException> errors;
    public static void init_errors() {
        errors = new ArrayList<ParseException>();
    }
}

PARSER_END(MiniJavaParser)

SKIP : {
      < #NEW_LINE: "\n" | "\r" >
    | < "/*" ((~["*"])* ("*" ~["/"])?)* ("*")? "*/" >
    | < "//" (~[ "\n", "\r" ])* <NEW_LINE> >
    | < <NEW_LINE> >
    | < " " | "\t" | "\f" >
}

TOKEN : {
      < CLASS: "class" >
    | < PUBLIC: "public" >
    | < STATIC: "static" >
    | < VOID: "void" >
    | < MAIN: "main" >
    | < STRING: "String" >
    | < EXTENDS: "extends" >
    | < RETURN: "return" >
    | < INT: "int" >
    | < BOOLEAN: "boolean" >
    | < IF: "if" >
    | < ELSE: "else" >
    | < WHILE: "while" >
    | < SYSTEM_OUT_PRINTLN: "System.out.println" >
    | < LENGTH: "length" >
    | < NEW: "new" >
    | < TRUE: "true" >
    | < FALSE: "false" >
    | < THIS: "this" >
    | < ABSTRACT: "abstract" >
    | < CONTINUE: "continue" >
    | < FOR: "for" >
    | < SWITCH: "switch" >
    | < ASSERT: "assert" >
    | < DEF: "default" >
    | < PACKAGE: "package" >
    | < SYNCHRONIZED: "synchronized" >
    | < DO: "do" >
    | < GOTO: "goto" >
    | < PRIVATE: "private" >
    | < BREAK: "break" >
    | < DOUBLE: "double" >
    | < IMPLEMENTS: "implements" >
    | < PROTECTED: "protected" >
    | < THROW: "throw" >
    | < BYTE: "byte" >
    | < IMPORT: "import" >
    | < THROWS: "throws" >
    | < CASE: "case" >
    | < ENUM: "enum" >
    | < INSTANCEOF: "instanceof" >
    | < TRANSIENT: "transient" >
    | < CATCH: "catch" >
    | < SHORT: "short" >
    | < TRY: "try" >
    | < CHAR: "char" >
    | < FINAL: "final" >
    | < INTERFACE: "interface" >
    | < FINALLY: "finally" >
    | < LONG: "long" >
    | < STRICTFP: "strictfp" >
    | < VOLATILE: "volatile" >
    | < CONST: "const" >
    | < FLOAT: "float" >
    | < NATIVE: "native" >
    | < SUPER: "super" >
    | < NULL: "null" >
    | < CURLY_OPEN: "{" >
    | < CURLY_CLOSE: "}" >
    | < PAREN_OPEN: "(" >
    | < PAREN_CLOSE: ")" >
    | < SQUARE_OPEN: "[" >
    | < SQUARE_CLOSE: "]" >
    | < SEMI_COLON: ";" >
    | < COMMA: "," >
    | < EQUAL: "=" >
    | < AND: "&&" >
    | < LESS: "<" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < STAR: "*" >
    | < DOT: "." >
    | < BANG: "!" >
    | < #LETTER: ["a" - "z"] | ["A" - "Z"] >
    | < #DIGIT: ["0" - "9"] >
    | < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT> | "_")* >
    | < INTEGER_LITERAL: "0" | (["1" - "9"]) (<DIGIT>)* >
    | < MONKEY: ~[] >
}

void Program() :
{}
{
    try {
        MainClass() ( ClassDecl() )* <EOF>
    } catch (ParseException exc) {
        errors.add(exc);
    }
}

void MainClass() :
{}
{
    <CLASS> <IDENTIFIER> <CURLY_OPEN> <PUBLIC> <STATIC> <VOID> <MAIN> <PAREN_OPEN> <STRING> <SQUARE_OPEN> <SQUARE_CLOSE> <IDENTIFIER> <PAREN_CLOSE> <CURLY_OPEN> Statement() <CURLY_CLOSE> <CURLY_CLOSE>
}

void ClassDecl() :
{}
{
      <CLASS> <IDENTIFIER> ( <EXTENDS> <IDENTIFIER> )? <CURLY_OPEN> ( VarDecl() )* ( MethodDecl() )* <CURLY_CLOSE>
    | <IDENTIFIER> <IDENTIFIER> <PAREN_OPEN> ( Type() <IDENTIFIER> ( <COMMA> Type() <IDENTIFIER> )* )? <PAREN_CLOSE> <CURLY_OPEN> <CURLY_CLOSE>
}

void VarDecl() :
{}
{
    Type() <IDENTIFIER> <SEMI_COLON>
}

void MethodDecl() :
{}
{
    <PUBLIC> Type() <IDENTIFIER> <PAREN_OPEN> ( Type() <IDENTIFIER> ( <COMMA> Type() <IDENTIFIER> )* )? <PAREN_CLOSE> <CURLY_OPEN> ( VarDecl() )* ( Statement() )* <RETURN> Expression() <SEMI_COLON> <CURLY_CLOSE>
}

void Type() :
{}
{
      <INT> <SQUARE_OPEN> <SQUARE_CLOSE>
    | <BOOLEAN>
    | <INT>
    | <IDENTIFIER>
}

void Statement() :
{}
{
    try {
          <CURLY_OPEN> ( Statement() )* <CURLY_CLOSE>
        | <IF> <PAREN_OPEN> Expression() <PAREN_CLOSE> Statement() <ELSE> Statement()
        | <WHILE> <PAREN_OPEN> Expression() <PAREN_CLOSE> Statement()
        | <SYSTEM_OUT_PRINTLN> <PAREN_OPEN> Expression() <PAREN_CLOSE> <SEMI_COLON>
        | <IDENTIFIER> <EQUAL> Expression() <SEMI_COLON>
        | <IDENTIFIER> <SQUARE_OPEN> Expression() <SQUARE_CLOSE> <EQUAL> Expression() <SEMI_COLON>
    } catch (ParseException exc) {
        errors.add(exc);
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != SEMI_COLON);
    }
}

void Expression() :
{}
{
    ExpressionPrec4()
}

void ExpressionPrec4() :
{}
{
    ExpressionPrec9() ( <AND> ExpressionPrec4() )?
}

void ExpressionPrec9() :
{}
{
    ExpressionPrec11() ( <LESS> ExpressionPrec9() )?
}

void ExpressionPrec11() :
{}
{
    ExpressionPrec12() (
          <PLUS> ExpressionPrec11()
        | <MINUS> ExpressionPrec11()
    )?
}

void ExpressionPrec12() :
{}
{
    ExpressionPrec14() ( <STAR> ExpressionPrec12() )?
}

void ExpressionPrec14() :
{}
{
      <BANG> Expression()
    | ExpressionPrec15()
}

void ExpressionPrec15() :
{}
{
    ExpressionPrec16() (
          <SQUARE_OPEN> Expression() <SQUARE_CLOSE>
        | <DOT> (
              <IDENTIFIER> <PAREN_OPEN> ( Expression() ( <COMMA> Expression() )* )? <PAREN_CLOSE>
            | <LENGTH>
        )
    )?
}

void ExpressionPrec16() :
{}
{
      <PAREN_OPEN> Expression() <PAREN_CLOSE>
    | ExpressionBaseCase()
}

void ExpressionBaseCase() :
{}
{
      <INTEGER_LITERAL>
    | <TRUE>
    | <FALSE>
    | <IDENTIFIER>
    | <THIS>
    | <NEW> (
          <INT> <SQUARE_OPEN> Expression() <SQUARE_CLOSE>
        | <IDENTIFIER> <PAREN_OPEN> <PAREN_CLOSE>
    )
}