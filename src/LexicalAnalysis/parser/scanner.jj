PARSER_BEGIN(MiniJavaParser)

package parser;

public class MiniJavaParser {}

PARSER_END(MiniJavaParser)

TOKEN : {
      < CLASS: "class" >
    | < PUBLIC: "public" >
    | < STATIC: "static" >
    | < VOID: "void" >
    | < MAIN: "main" >
    | < STRING: "String" >
    | < EXTENDS: "extends" >
    | < RETURN: "return" >
    | < INT: "int" >
    | < BOOLEAN: "boolean" >
    | < IF: "if" >
    | < ELSE: "else" >
    | < WHILE: "while" >
    | < SYSTEM_OUT_PRINTLN: "System.out.println" >
    | < LENGTH: "length" >
    | < NEW: "new" >
    | < TRUE: "true" >
    | < FALSE: "false" >
    | < THIS: "this" >
    | < ABSTRACT: "abstract" >
    | < CONTINUE: "continue" >
    | < FOR: "for" >
    | < SWITCH: "switch" >
    | < ASSERT: "assert" >
    | < DEF: "default" >
    | < PACKAGE: "package" >
    | < SYNCHRONIZED: "synchronized" >
    | < DO: "do" >
    | < GOTO: "goto" >
    | < PRIVATE: "private" >
    | < BREAK: "break" >
    | < DOUBLE: "double" >
    | < IMPLEMENTS: "implements" >
    | < PROTECTED: "protected" >
    | < THROW: "throw" >
    | < BYTE: "byte" >
    | < IMPORT: "import" >
    | < THROWS: "throws" >
    | < CASE: "case" >
    | < ENUM: "enum" >
    | < INSTANCEOF: "instanceof" >
    | < TRANSIENT: "transient" >
    | < CATCH: "catch" >
    | < SHORT: "short" >
    | < TRY: "try" >
    | < CHAR: "char" >
    | < FINAL: "final" >
    | < INTERFACE: "interface" >
    | < FINALLY: "finally" >
    | < LONG: "long" >
    | < STRICTFP: "strictfp" >
    | < VOLATILE: "volatile" >
    | < CONST: "const" >
    | < FLOAT: "float" >
    | < NATIVE: "native" >
    | < SUPER: "super" >
    | < NULL: "null" >
    | < CURLY_OPEN: "{" >
    | < CURLY_CLOSE: "}" >
    | < PAREN_OPEN: "(" >
    | < PAREN_CLOSE: ")" >
    | < SQUARE_OPEN: "[" >
    | < SQUARE_CLOSE: "]" >
    | < SEMI_COLON: ";" >
    | < COMMA: "," >
    | < EQUAL: "=" >
    | < AND: "&&" >
    | < LESS: "<" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < STAR: "*" >
    | < DOT: "." >
    | < BANG: "!" >
    | < #LETTER: ["a" - "z"] | ["A" - "Z"] >
    | < #DIGIT: ["0" - "9"] >
    | < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT> | "_")* >
    | < INTEGER_LITERAL: (<DIGIT>)+ >
}

SKIP : {
      < #NEW_LINE: "\n" | "\r" >
    | < "/*" ((~["*"])* ("*" ~["/"])?)* ("*")? "*/" >
    | < "//" (~[])* <NEW_LINE> >
    | < <NEW_LINE> >
    | < " " | "\t" | "\f" >
}